Part 4: Sorting a List<int> in Reverse Order 
Using List.Sort with CompareTo and a Lambda Expression 
Objective: 
Sort a list of integers in descending order using 
List.Sort with a lambda expression and verify the
 results by printing the
 sorted list in one line. 
Instructions: 
1. Create a Script: 
● Create a new script in Unity and name it ListMethodsExample.
 2. Create a List of Integers: 
● Initialize a List<int> named numbers and populate 
it with several integer values. 
3. Call the Sort Method and Pass a Lambda Expression: 
● Use the Sort method on the list and pass a lambda expression to compare two integers, x and y, in reverse order. 
● Use y.CompareTo(x) in the lambda expression to swap the 
default comparison order. 
4. Print the Results: 
● Use string.Join(", ", numbers) to convert the sorted list into 
a single string with elements separated by commas. 
● Log the result to the Console in one line.
Page 7 of 13 
Expected Console Output: 
For a list initialized as: 
List<int> numbers = new List<int> { 3, 1, 4, 1, 5, 9 };
 The Console output should be: 
9, 5, 4, 3, 1, 1
Page 8 of 13 
Part 5: Using List.FindAll in C# 
Objective: 
Learn how to use the List.FindAll method to filter
 elements in a list based on a specified condition. 
Instructions: 
1. Create a List of Integers: 
● In the same previous script ListMethodsExample Initialize 
a List<int> named numbers2 and populate it with several 
integer values. 
2. Use the FindAll Method: 
● Use the FindAll method to create a new list filteredNumbers
 containing only the elements that satisfy the condition to 
 find all even numbers. 
● Pass a lambda expression to the FindAll method to define the 
condition (i.e find all even numbers). 
3. Print the Results: 
● Use string.Join(", ", filteredNumbers) to convert the filtered 
list into a single string and log it to the Console. 
Expected Console Output: 
For a list initialized as: 
List<int> numbers2 = new List<int> { 3, 1, 4, 1, 5, 9, 2, 6 }; 
The Console output for finding even numbers should be: 
4, 2, 6
Page 9 of 13 
Part 6: Using UnityEvent and AddListener() in Unity 
Objective: 
Learn how to use UnityEvent and AddListener() to create and handle custom events programmatically. 
Instructions: 
1. Create a Script: 
● Create a new script in Unity and name it UnityEventExample. 
2. Add a UnityEvent Field: 
Declare a public UnityEvent field in your script to hold the custom event. e 
3. Initialize the UnityEvent: 
Inside the Start method, initialize it. 
onEventTriggered = new UnityEvent(); 
4. Add a Listener Programmatically: 
Use the AddListener method to attach a method to the UnityEvent. Hint: 
onEventTriggered.AddListener(OnEventResponse);
Page 10 of 13 
5. Trigger the UnityEvent: 
In the Update() method Use the Invoke method to call the event programmatically, when the Spacebar key is pressed. 
6. Write the Listener Method: 
Create a method that logs to the Console "The event has been triggered!" when the event is triggered. 
Expected Console Output: 
When the event is triggered (by pressing the Space key), the Console should display: 
The event has been triggered!
Page 11 of 13 
Part 7: Method Chaining in Unity 
Objective: 
Learn how to implement and use method chaining in Unity by creating methods that return the current instance of the class (this), enabling chained method calls. 
Instructions: 
1. Create a Script: 
● Create a new script in Unity and name it MethodChainingExample. 
2. Define a Class with Chainable Methods: 
● Create a class with the following methods that return the current instance (this) to allow chaining: 
○ SetPosition(Vector3 position): Updates the GameObject’s position. ○ SetRotation(Vector3 rotation): Updates the GameObject’s rotation. ○ SetScale(Vector3 scale): Updates the GameObject’s scale. 
Hints: 
● Use transform.position, transform.rotation, and transform.localScale to modify the GameObject's properties. 
● Return the current instance using return this; at the end of each method.
Page 12 of 13 
3. Use Method Chaining: 
● In the Start method, chain the methods together to set the position, rotation, and scale of the current gameObject. 
○ Call the methods one after the other in a single chain: 
void Start() 
{ 
SetPosition(new Vector3(0, 1, 0)) 
.SetRotation(new Vector3(45, 0, 0)) 
.SetScale(new Vector3(2, 2, 2)); 
} 
Expected Behavior in Unity: 
When the scene starts: 
● The GameObject's position will be updated to (0, 1, 0). 
● Its rotation will be set to 45° on the X-axis. 
● Its scale will be updated to (2, 2, 2).
Page 13 of 13 
Part 8: Abstract Classes in C# 
Objective: 
Learn how to define and use abstract classes by creating a base class with abstract methods and deriving concrete classes from it. 
Instructions: 
1. Create an Abstract Base Class: 
● Create a script and name it AbstractBaseClass. 
● Define an abstract class with one abstract method void PerformAction() and one concrete void PrintInfo() method. 
● Use the abstract keyword to declare the class and the abstract method. 
2. Create a Derived Class: 
● Create another script and name it DerivedClassExample. 
● Inherit from the AbstractBaseClass. 
● Implement the abstract method in the derived class. 
● Use the override keyword to implement the abstract method. 
3. Test the Implementation: 
● Create a TestAbstractClass that is derived from the MonoBehaviour class and attach it to a GameObject in your Unity scene. 
● In the Start method of the TestAbstractClass class, call both the implemented abstract method and the concrete method from the derived class. PerformAction(); PrintInfo(); 
Expected Console Output: 
When the scene starts, you should see: 
PerformAction is implemented in the derived class. 
This is a concrete method in the abstract base class. Good luck!
